Складывание чисел, введенных через консоль.
public class MathOperations
    {
        public static void Main()
        {
            int a = int.Parse(Console.ReadLine());
            int b = int.Parse(Console.ReadLine());
            Console.WriteLine(Addition(a, b));
        }

        public static int Addition(int a, int b)
        {
            return a + b;
        }
    }

Получение из потока данных, вычленение из них чисел и вычисление их квадратного корня в обратном порядке вхождению.

public class SqrtFromStream
    {
        public static void Main()
        {
            FileStream fs1 = File.OpenRead("d:\\C#\\Ulearn\\Log.txt");
            StreamReader reader = new StreamReader(fs1);
            string forParser = (reader.ReadToEnd());
            reader.Close();
            Regex r = new Regex(@"\d+");
            Match m = r.Match(forParser);
            List<string> list = new List<string>();
            while (m.Success)
            {
                var str = Convert.ToString(m);
                list.Add(str);
                m = m.NextMatch();
            }
            List<double> sqrtList = new List<double>();
            foreach (var i in list)
            {
                double cypher = Convert.ToDouble(i);
                if (cypher >= 0 || cypher <= 1000000000000000000)
                { 
                    var result = Math.Sqrt(cypher);
                    sqrtList.Add(result);
                }
                continue;
            }
            sqrtList.Reverse();
            foreach (var j in sqrtList)
            {
                Console.WriteLine(j);
            }
        }
    }

Количество напыления, необходимое для пластин прощади (а*b) и n штук

 public class Spraying
    {
        public static void Main()
        {
            Console.WriteLine(SqareCounter(-1, 2, 4));
        }
        static int SqareCounter(int n, int a, int b)
        {
            if ((n<=1 || n>=100) || (a <= 1 || a >= 100) || (b <= 1 || b >= 100))
            {
                return -1;
            }
            return a * b * n * 2;
        }
    }

Сколько банок не прострелил каждый из бандитов, при условии, что последнюю банку они прострелили оба

public class Shooting
    {
        public static void Main()
        {
            Start:
            Console.WriteLine("Введите количество банок, в которые попал один из бандитов:");
            int firstBandidoCannons = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество банок, в которые попал другой из бандит:");
            int secondBandidoCanons = int.Parse(Console.ReadLine());
            int allCannons = (firstBandidoCannons + secondBandidoCanons) - 1;
            if (allCannons >= 11)
            {
                Console.WriteLine("Сумма простреленных банок не может быть больше 11!\r\nНажмите любую кнопку");
                Console.ReadLine();
                Console.Clear();
                goto Start;
            }
            Console.WriteLine("Первый бандит не прострелил: " + FirstNotShotThrough(allCannons, firstBandidoCannons) + " банок");
            Console.WriteLine("Второй бандит не прострелил: " + SecondNotShotThrough(allCannons, secondBandidoCanons) + " банок");
        }
        static int FirstNotShotThrough(int allCannons, int firstBandidoCannons)
        {
            int firstNotShotThrough = allCannons - firstBandidoCannons;
            return firstNotShotThrough;
        }
        static int SecondNotShotThrough(int allCannons, int secondBandidoCannons)
        {
            int secondNotShotThrough = allCannons - secondBandidoCannons;
            return secondNotShotThrough;
        }
    }

Успел или не успел Гриша решить 12 задач за олимпиаду, если учесть, что за первый час он решит n задач, а потом каждую задачу за 45 минут.

public class ResolvingTasks
    {
        public static void Main()
        {
            Start:
            Console.WriteLine("Введите количество задач, которые решит Гриша за первый час (Количество решенных за час задач не может быть больше 11!): ");
            int countTasks = int.Parse(Console.ReadLine());
            if (countTasks >= 11 || countTasks <1)
            {
                Console.WriteLine("Количество задач, которые решит Гриша за первый час от 1 до 11!\r\nНажмите любую кнопку");
                Console.ReadLine();
                Console.Clear();
                goto Start;
            }
            Console.WriteLine(InTimeOrNot(countTasks));
        }
        static string InTimeOrNot(int countTasks)
        {
            double resolvedTasks = 300 / (12 - countTasks);
            if (resolvedTasks < 45)
            {
                return "Не успел";
            }
            return "Успел";
        }
    }

Задача про два замка от велосипеда

public class Lock
    {
        public static void Main()
        {
            Start:
            Console.WriteLine("Введите четыре цифры кода первого замка: ");
            int key1 = int.Parse(Console.ReadLine());
            if (key1 < 0 || key1 > 9999)
                {
                Console.WriteLine("Число не может быть меньше 0 или больше 9999!\n\tНажмите любую кнопку");
                Console.ReadKey();
                Console.Clear();
                goto Start;
                }
            Start2:
            Console.WriteLine("Введите четыре цифры кода второго замка: ");
            int key2 = int.Parse(Console.ReadLine());
            if (key2 < 0 || key2 > 9999)
                {
                Console.WriteLine("Число не может быть меньше 0 или больше 9999!\n\tНажмите любую кнопку");
                Console.ReadKey();
                Console.Clear();
                goto Start2;
                } 
            if (key1 % 2 == 0 || key2 % 2 != 0)
                Console.WriteLine("Вор спиздит велосипед");
            else if (key1 % 2 != 0 || key2 % 2 == 0)
                Console.WriteLine("Вор не спиздит велосипед");
        }
    }

Ягоды у математиков

public class Berryes
    {
        public static void Main()
        {
            int basketWithBerriesFirstMath = 10;
            int basketWithBerriesSecondMath = 15;
            int basketWithoutBerriesFirstMath = 3;
            int basketWithDoubleBerriesSecondMath = (basketWithBerriesFirstMath - basketWithoutBerriesFirstMath) + basketWithBerriesSecondMath;
            int basketWithoutBerriesSecondMath = 4;
            int basketWithDoubleBerriesFirstMath = (basketWithBerriesSecondMath - basketWithoutBerriesSecondMath) + basketWithBerriesFirstMath;
            int BerriesFirstMath = basketWithBerriesFirstMath - basketWithoutBerriesFirstMath;
            int BerriesSecondMath = basketWithBerriesSecondMath - basketWithoutBerriesSecondMath;
            Console.WriteLine("Ягод у первого математика: " + BerriesFirstMath + "; Ягод у второго математика: " + BerriesSecondMath);
        }

Заполнение массива, вхождение в него числа, затем подсчет количества строк кода.

  public class StringCounter
    {
        public static void Main()
        {
            int numberOfArrayNumbers = 45;
            int numberAsPartArray = 5897;
            int[] massiv = new int[numberOfArrayNumbers];
            Random rnd = new Random();
            int countOfEntering = 0;
            for (int i = 0; i < massiv.Length; i++)
            {
                massiv[i] = rnd.Next(0,40000);
                Console.Write(massiv[i] + ", ");
                if (numberAsPartArray == massiv[i])
                {
                    countOfEntering = +countOfEntering;
                }
            }
            Console.WriteLine("\nКоличество Вхождений: " + countOfEntering);
            // Дальше открываем *.cs и парсим количество строк - это и будет количество секунд.
        }
    }

Минимальное арифметическое трех чисел, между которыми расставлены арифметические знаки.

public class MinArithmetic
    {
        public static void Main()
        {
        Start:
            Console.WriteLine("Введите первое число от 0 до 100");
            int number1 = int.Parse(Console.ReadLine());
            if (number1 < 0 || number1 > 100)
            {
                Console.WriteLine("Число не может быть меньше 0 или больше 100!\n\tНажмите любую кнопку");
                Console.ReadKey();
                Console.Clear();
                goto Start;
            }
        Start1:
            Console.WriteLine("Введите второе число от 0 до 100");
            int number2 = int.Parse(Console.ReadLine());
            if (number2 < 0 || number2 > 100)
            {
                Console.WriteLine("Число не может быть меньше 0 или больше 100!\n\tНажмите любую кнопку");
                Console.ReadKey();
                Console.Clear();
                goto Start1;
            }
        Start2:
            Console.WriteLine("Введите третье число от 0 до 100");
            int number3 = int.Parse(Console.ReadLine());
            if (number3 < 0 || number3 > 100)
            {
                 Console.WriteLine("Число не может быть меньше 0 или больше 100!\n\tНажмите любую кнопку");
                 Console.ReadKey();
                 Console.Clear();
                 goto Start1;
            }
            int[] arrayOfNumbers = new [] { number1, number2, number3 };
            Array.Sort(arrayOfNumbers);
            int result = arrayOfNumbers[0] - arrayOfNumbers[1] * arrayOfNumbers[2];
            Console.WriteLine("Знаки расставлены таким образом, что минимальное арифметическое их:" + result);
        }
    }


Дональд сортирует письма по почтовым ящикам

public class DonaldSteps
    {
        public static void Main()
        {
            string[] disneyCartoonsHeroes1 = { "Alice", "Ariel", "Aurora", "Phil", "Peter", "Olaf", "Phoebus", "Ralph", "Robin" };
            string[] disneyCartoonsHeroes2 = { "Bambi", "Belle", "Bolt", "Mulan", "Mowgli", "Mickey", "Silver", "Simba", "Stitch" };
            string[] disneyCartoonsHeroes3 = { "Dumbo", "Genie", "Jiminy", "Kuzko", "Kida", "Kenai", "Tarzan", "Tiana", "Winnie" };
            string[] numberOfLetters = { "Ariel", "Alice", "Aurora", "Aurora", "Aurora", "Aurora", "Aurora", "Aurora", "Aurora", "Aurora" };
            int k = 0;
            int n = 0;
            for (int i=0; i<8; i++)
            {
                for (int j = 0; j < numberOfLetters.Length - 1; j++)
                { 
                if (((numberOfLetters[j] == disneyCartoonsHeroes1[i]) && (numberOfLetters[j+1] == disneyCartoonsHeroes1[i])) || ((numberOfLetters[j] == disneyCartoonsHeroes3[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes3[i])) || ((numberOfLetters[j] == disneyCartoonsHeroes2[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes2[i])))
                    {
                        n = 0;
                    }
                else if (((numberOfLetters[j] == disneyCartoonsHeroes2[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes3[i])) || ((numberOfLetters[j] == disneyCartoonsHeroes1[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes2[i])) || ((numberOfLetters[j] == disneyCartoonsHeroes3[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes2[i])) || ((numberOfLetters[j] == disneyCartoonsHeroes2[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes1[i])))
                    {
                        n = 1;
                    }
                else if (((numberOfLetters[j] == disneyCartoonsHeroes1[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes3[i])) || ((numberOfLetters[j] == disneyCartoonsHeroes3[i]) && (numberOfLetters[j + 1] == disneyCartoonsHeroes1[i])))
                    {
                        n = 2;
                    }                
                }
                k = k + n;
            }
            Console.WriteLine(k);
        }
    }


Задание квадратичного массива, заполнение его и перестроение по диагонали.

public class DiagonalMatrix
    {
        public static void Main()
        {
            int arraySize = 8; // Задание размера массива arraySize х arraySize
            int[,] massiv = new int[arraySize, arraySize];
            Random rnd = new Random();
            for (int i = 0; i < arraySize; i++)
            {
                for (int j = 0; j < arraySize; j++)
                {
                    massiv[i, j] = rnd.Next(0, 100);
                    Console.Write("{0,3}", massiv[i, j]); // Выделение при печати места под три дигита  
                }
                Console.WriteLine();
            }
            Console.WriteLine("Перестроенный массив:");
            for (int i = 0; i < arraySize; i++)
            {
                int x = i, y = 0;
                while (x >= 0 && x <= arraySize)
                {
                    Console.Write(massiv[x, y] + " ");
                    x--;
                    y++;
                }
            }
            for (int i = 0; i < arraySize; i++)
            {
                int x = arraySize - 1, y = i + 1;
                while (y >= 1 && y < arraySize)
                {
                    Console.Write(massiv[x, y] + " ");
                    x--;
                    y++;
                }
            }
        }
    }


найти сумму всех целых чисел, лежащих между 1 и N включительно.

public class SummInteger
    {
        public static void Main()
        {
            int k = 0;
            int n = -3;
            if (n<=1)
            {
                for (int i = n; i <= 1; i++)
                    k = k + i;
            }
            else
            {
                for (int j = 1; j <= n; j++)
                {
                    k = k + j;
                }
            }
            Console.WriteLine(k);
        }
    }


определить, какая цифра находится в последовательности цифр из степеней двойки на определённом месте

public class PowerOfDecimal
    {
        public static void Main()
        {
            int endPowerOfTen = 15;
            int placeCypher = 55;
            string row = "";
            for (double i = 1; i < endPowerOfTen; i++)
            {
                double rowDouble = Convert.ToInt64(Math.Pow(10, i));
                string rowString = rowDouble.ToString();
                row = row + rowString;
            }
            Console.WriteLine(row.Substring(placeCypher-1,1));
        }
    }

вывод матрицы по диагонали начиная с правого верхнего угла (к сожалению подсмотрена)

public class DiagonalMatrix
    {
        public static void Main()
        {
            int arraySize = 16; // Задание размера массива arraySize х arraySize
            int[,] massiv = new int[arraySize, arraySize];
            int count = 1;
            int k = 1;
            for (int j = 0; j < arraySize; j++)
            {
                for (int i = 0; i < arraySize; i++)
                {
                    massiv[i, j] = k;
                    k++;
                    Console.Write("{0,3}", massiv[i, j]);
                }
                Console.WriteLine();
            }
            Console.WriteLine();
            for (int x = arraySize; x >= 0; x--)
            {
                int y = 0;
                int xx = x;
                bool exc = false;
                while (!exc)
                {
                    try
                    {
                        massiv[xx, y] = count;
                        count++;
                        xx++;
                        y++;
                    }
                    catch
                    {
                        exc = true;
                        break;
                    }
                }
            }

            for (int y = 1; y <= arraySize - 1; y++)
            {
                int x = 0;
                int yy = y;
                bool exc = false;
                while (!exc)
                {
                    try
                    {
                        massiv[x, yy] = count;
                        count++;
                        x++;
                        yy++;
                    }
                    catch
                    {
                        exc = true;
                        break;
                    }
                }
            }

            for (int x = 0; x < arraySize; x++)
            {
                for (int y = 0; y < arraySize; y++)
                {
                    Console.Write("{0,3}", massiv[y, x]);
                }
                Console.WriteLine();
            }
        }    
    }

Наибольшее количество пингвинов в записной книжке

public class NumberOfPinguins
    {
        public static void Main()
        {
            int numberOfStrings = 25;
            int EmperorPenguin = 0;
            int MacaroniPenguin = 0;
            int LittlePenguin = 0;
            Random rnd = new Random();
            string[] penguinTitle = { "Emperor Penguin", "Little Penguin", "Macaroni Penguin" };
            List<string> penguinList = new List<string>();
            for (int i = 0; i < numberOfStrings; i++)
            {
                int mIndex = rnd.Next(0, penguinTitle.Length);
                penguinList.Add(penguinTitle[mIndex]);
                Console.WriteLine(penguinTitle[mIndex]);
            }
            foreach (string item in penguinList)
            {
                if (item == "Emperor Penguin")
                {
                    EmperorPenguin++;
                }
                if (item == "Little Penguin")
                {
                    LittlePenguin++;
                }
                if (item == "Macaroni Penguin")
                {
                    MacaroniPenguin++;
                }
            }
            int maxValue = EmperorPenguin;
            string maxValueTitle = "Emperor Penguin";
            if (LittlePenguin > maxValue && LittlePenguin > MacaroniPenguin)
            {
                maxValue = LittlePenguin;
                maxValueTitle = "Little Penguin";
            }
            else if (MacaroniPenguin > maxValue && MacaroniPenguin > LittlePenguin)
            {
                maxValue = MacaroniPenguin;
                maxValueTitle = "Macaroni Penguin";
            }
            Console.WriteLine("Наибольшее колличество - " + maxValue + " " + maxValueTitle);
        }    
    }

Вывод в качестве подсказки возможных иероглифов в латинице из базы

public class JapanHieroglyphs
    {
        public static void Main()
        {
            int numberOfStrings = 20;
            var chars = "bcdfghjklmnpqrstvwxz";
            var chars2 = "aeiouy";
            var stringChars = new char[numberOfStrings];
            var stringChars2 = new char[numberOfStrings];
            Random rnd = new Random();
            List<string> latinList = new List<string>();
            for (int i = 0; i < numberOfStrings; i++)
            {
                stringChars[i] = chars[rnd.Next(chars.Length)];
                stringChars2[i] = chars2[rnd.Next(chars2.Length)];
                latinList.Add(stringChars[i].ToString() + stringChars2[i].ToString());
            }
            for (int j = 0; j < numberOfStrings; j++)
            {
                Console.WriteLine(latinList[j]);              
            }
            Console.WriteLine();
            Console.WriteLine("Введите первый символ необходимого иероглифа: ");
            string coincidence = Console.ReadLine();
            Regex myCoincidence = new Regex($"^{coincidence}");
            for (int k = 0; k < numberOfStrings; k++)
            {
                MatchCollection matches = myCoincidence.Matches(latinList[k]);
                foreach (Match m in matches)
                {
                    Console.WriteLine(latinList[k]);
                }
            }
        }    
    }

Танцы синуса

public class SinusDances
    {
        public static void Main()
        {
            int count = 3;
            int n = count;
            string piece = "";
            string summPiece = "";
            string braket = "";
            string aN = "";
            string sign = "";
            string braket1 = "";
            string braket2 = "";
            string sN = "";
            for (int i = 1; i <= count; i++)
            {
                if (i==1)
                {
                    sign = "";
                }
                else if (i%2==0)
                {
                    sign = "-";
                }
                else
                {
                    sign = "+";
                }
                piece = "sin(" + i;
                summPiece = summPiece + sign + piece;
                braket = braket + ")";
                aN = summPiece + braket;
                //Console.WriteLine(aN);
                
                braket1 = braket1 + "(";
                if (n==1)
                {
                   sN = sN + aN + "+" + n;
                }
                else
                { 
                    sN = sN + aN + "+" + n + ")";
                }
                n = n - 1;
            }
            for (int j = 1; j < count; j++)
            {
                braket2 = braket2 + "(";
            }
            Console.WriteLine(braket2 + sN);
        }    

}

Баянные магазины

public class Bayan
    {
        public static void Main()
        {
            int numberOfShops = 25;
            Random rnd = new Random();
            string[] shopTitle = { "shop1", "shop2", "shop3", "shop4", "shop5", "shop6", "shop7", "shop8", "shop9", "shop10", "shop11", "shop12", "shop13", "shop14", "shop15", "shop16", "shop17", "shop18", "shop19", "shop20", "shop21", "shop22", "shop23", "shop24", "shop25", "shop26", "shop27", "shop28", "shop29", "shop30", "shop31" };
            List<string> shopList = new List<string>();
            for (int i = 0; i < numberOfShops; i++)
            {
                int mIndex = rnd.Next(0, shopTitle.Length);
                shopList.Add(shopTitle[mIndex]);
                Console.WriteLine(shopTitle[mIndex]);
            }
            IEnumerable<string> iteration = shopList.Distinct();
            int count = iteration.Count();
            int bayans = numberOfShops - count;
            Console.WriteLine(bayans);
        }    
    }


Демократия в опасности

public class Democracy
    {
        public static void Main()
        {
            int[] groupMembers = { 9, 21, 29, 11, 51, 15, 47, 23, 3 };
            Array.Sort(groupMembers);
            int summOfSitizens = 0;
            for (int i = 0; i < (groupMembers.Length + 1) / 2; i++)
            {
                groupMembers[i] = (groupMembers[i] + 1) / 2;
                summOfSitizens += groupMembers[i];
                Console.WriteLine(groupMembers[i]);
            }
            Console.WriteLine(summOfSitizens);
        }
    }

Стипендия по средней оценке

public class Grants
    {
        public static void Main()
        {
            int numberOfExams = 10;
            string grants = "";
            double summ = 0;
            Random rnd = new Random();
            double[] intChars = new double[numberOfExams];
            for (int i = 0; i < numberOfExams; i++)
            {
                intChars[i] = rnd.Next(3, 6);
                if (intChars[i] == 3)
                {
                    grants = "None";
                }
                summ = summ + intChars[i];
                Console.WriteLine(intChars[i]);
            }
            double averageMarks = summ / numberOfExams;
            averageMarks = Math.Round(averageMarks, 2);
            Console.WriteLine(averageMarks);
            if (averageMarks == 5)
            {
                grants = "Named";
            }
            if (averageMarks >= 4.5 && grants!= "None")
            {
                grants = "High";
            }
            if (averageMarks < 4.5 && grants != "None")
            {
                grants = "Common";
            }
            Console.WriteLine(grants);
        }
    }

Книжный червяк, который прогрызает книги

 public class BookWarm
    {
        public static void Main()
        {
            Console.WriteLine("Введите толщину книги, мм не более 100");
            int depthBook = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите толщину переплета, мм не более 10");
            int depthBinding = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите номер тома, с первого листа которого червяк начал свой путь, не более 99");
            int volumeNumberStart = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите номер тома, на последнем листе которого он остановился, не более 100");
            int volumeNumberFinish = int.Parse(Console.ReadLine());
            if (volumeNumberStart < volumeNumberFinish)
            { 
                int volumeNumbersFull = volumeNumberFinish - volumeNumberStart - 1;
                int numberOfBindings = volumeNumbersFull*2 + 2;
                int allPath = (volumeNumbersFull * depthBook) + (numberOfBindings * depthBinding);
                Console.WriteLine(allPath);
            }
            if (volumeNumberStart > volumeNumberFinish)
            {
                int volumeNumbersFull = volumeNumberStart - volumeNumberFinish + 1;
                int numberOfBindings = (volumeNumberStart - volumeNumberFinish)*2;
                int allPath = (volumeNumbersFull * depthBook) + (numberOfBindings * depthBinding);
                Console.WriteLine(allPath);
            }
            if (volumeNumberStart == volumeNumberFinish)
            {
                int allPath = depthBook;
                Console.WriteLine(allPath);
            }
        }
    }

Распределение камней на две кучи, разница весов между двумя кучами минимальна.
К сожалению, реализован неверный алгоритм.

 public class PileOfStones
    {
        public static void Main()
        {
            Console.WriteLine("Введите количество камней: (от 1 до 20)");
            int arraySize = int.Parse(Console.ReadLine());
            int[] stonesWeight = new int[arraySize];
            Random rnd = new Random();
            for (int i = 0; i < arraySize; i++)
            {
                stonesWeight[i] = rnd.Next(0, 100);
                Console.WriteLine(stonesWeight[i]);
            }
            Array.Sort(stonesWeight);
            Array.Reverse(stonesWeight);
            for (int j = 0; j < arraySize; j++)
            {
                Console.Write(stonesWeight[j] + ", ");
            }
            Console.WriteLine();
            List<int> PileOfStones1 = new List<int>();
            List<int> PileOfStones2 = new List<int>();
            PileOfStones1.Add(stonesWeight[0]);
            PileOfStones2.Add(stonesWeight[1]);
            for (int k = 2; k < arraySize; k+=2)
            {
                PileOfStones2.Add(stonesWeight[k]);
            }
            for (int l = 3; l < arraySize; l+=2)
            {
                PileOfStones1.Add(stonesWeight[l]);
            }
            int PileOfStones1Count = 0;
            int PileOfStones2Count = 0;
            foreach (int list1 in PileOfStones1)
            {
                Console.Write(list1 + " ");
                PileOfStones1Count += list1;
            }
            Console.WriteLine();
            foreach (int list2 in PileOfStones2)
            {
                Console.Write(list2 + " ");
                PileOfStones2Count += list2;
            }
            Console.WriteLine();
            Console.WriteLine(PileOfStones1Count);
            Console.WriteLine(PileOfStones2Count);
        }
    }

найти минимальное положительное целое число Q такое, что произведение цифр числа Q в точности равняется N.
не правильное решение!!!
public class Composition
    {
        public static void Main()
        {
            long integerNumber = Int64.Parse(Console.ReadLine());
            string number = "";
            long ostatok = 1;
            for (int i = 9; i >= 2; i--)
            {
                if ((integerNumber > 1) && (integerNumber % i == 0))
                {
                    number = i.ToString() + number;
                    ostatok = integerNumber % i;
                }
            }
            if (ostatok == 0)
                    {
                        Console.WriteLine("Число найдено - " + number);
                    }
                    else
                    {
                        Console.WriteLine("Число не найдено");
                    }
        }
    }

Собственные Числа комманды.
public class TeamNumbers
    {
        static void Main()
        {
            Console.WriteLine("Введите количество чисел первого игрока:");
            int lenght1 = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество чисел второго игрока:");
            int lenght2 = int.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество третьего первого игрока:");
            int lenght3 = int.Parse(Console.ReadLine());
            int[] numbersOfFirstGamer = new int[lenght1];
            int[] numbersOfSecondGamer = new int[lenght2];
            int[] numbersOfThirdGamer = new int[lenght3];
            Random rnd = new Random();
            for (int i = 0; i < numbersOfFirstGamer.Length; i++)
            {
                numbersOfFirstGamer[i] = rnd.Next(0, 10);
                Console.Write(numbersOfFirstGamer[i] + ", ");
            }
            Console.WriteLine();
            for (int j = 0; j < numbersOfSecondGamer.Length; j++)
            {
                numbersOfSecondGamer[j] = rnd.Next(0, 10);
                Console.Write(numbersOfSecondGamer[j] + ", ");
            }
            Console.WriteLine();
            for (int k = 0; k < numbersOfThirdGamer.Length; k++)
            {
                numbersOfThirdGamer[k] = rnd.Next(0, 10);
                Console.Write(numbersOfThirdGamer[k] + ", ");
            }
            Console.WriteLine();
            List<int> numbersOfTeam = new List<int>();
            Array.Sort(numbersOfFirstGamer);
            Array.Sort(numbersOfSecondGamer);
            Array.Sort(numbersOfThirdGamer);
            for (int l = 0; l < numbersOfFirstGamer.Length; l++)
            {
                int index1 = System.Array.IndexOf(numbersOfSecondGamer, numbersOfFirstGamer[l]);
                int index2 = System.Array.IndexOf(numbersOfThirdGamer, numbersOfFirstGamer[l]);
                if (index1 >= 0 && index2 >= 0)
                {
                    numbersOfTeam.Add(numbersOfFirstGamer[l]);
                }
            }
            Console.WriteLine();
            IEnumerable<int> numbersOfTeamEnd = numbersOfTeam.Distinct();
            foreach (int m in numbersOfTeamEnd)
            {
                Console.Write(m + ", ");
            }
            Console.WriteLine();
        }
    }

Задача про черных и чумазых чертенков. Смысл в том, что в ряду всегда можно ставить сумму. Подсмотренно. Но я сам был в шаге от решения.

int a = int.Parse(Console.ReadLine());
        int sum = 0;
        for(int i = 1; i <= a; i++) {
            sum += i;
        }
        if(sum % 2 == 0) {
            Console.WriteLine("black");
        }
        else {
            Console.WriteLine("grimy");
        }

Свадебный обед

class WeddingDinner
    {
        static void Main()
        {
            Enter:
            Console.WriteLine("Введите количество друзей, которым отправлено приглашение(не более 27): ");
            int guestNumber;
            string input = Console.ReadLine();
            if (Int32.TryParse(input, out guestNumber))
            {
                if (guestNumber > 27)
                {
                    Console.WriteLine("Приглашений больше 27, нажмите любую кнопку...");
                    Console.ReadKey();
                    Console.Clear();
                    goto Enter;
                }
                else
                { 
                goto Start;
                }
            }
            else
            {
                Console.WriteLine("Некорректный ввод, нажмите любую кнопку...");
                Console.ReadKey();
                Console.Clear();
                goto Enter;
            }
        Start:
            string[] guests = { "Alice", "Ariel", "Aurora", "Phil", "Peter", "Olaf", "Phoebus", "Ralph", "Robin", "Bambi", "Belle", "Bolt", "Mulan", "Mowgli", "Mickey", "Silver", "Simba", "Stitch", "Dumbo", "Genie", "Jiminy", "Kuzko", "Kida", "Kenai", "Tarzan", "Tiana", "Winnie" };
            string[] withFriend = { " ", "+one" };
            List<string> guestList = new List<string>();
            Random rnd = new Random();
            Regex r = new Regex($"[+]one");
            int guestCounter = 0;
            for (int i = 0; i < guestNumber; i++)
            {
                int fIndex = rnd.Next(0, withFriend.Length);
                guestList.Add(guests[i] + withFriend[fIndex]);
                Match m = r.Match(guestList[i]);
                if (m.Success)
                {
                    guestCounter += 2;
                }
                else
                {
                    guestCounter += 1;
                }
                Console.WriteLine(guestList[i]);
            }
            guestCounter = guestCounter + 2;
            if (guestCounter == 13 )
            {
                guestCounter = guestCounter + 1;
            }
            Console.WriteLine("Всего гостей: " + guestCounter + " необходимо заплатить денег: " + guestCounter*100 + "$");
        }
    }

SMS-спам

class SMSSpam
    {
        static void Main()
        {
            string tagline = "a vas, ya poproshu ostatsya!";
            var symbols = tagline.ToArray();
            int roublesSumm = 0;
            for (int i = 0; i < symbols.Length; i++)
            {
                if (symbols[i].ToString() ==  "a" || symbols[i].ToString() == "d" || symbols[i].ToString() == "g" || symbols[i].ToString() == "j" || symbols[i].ToString() == "m" || symbols[i].ToString() == "p" || symbols[i].ToString() == "s" || symbols[i].ToString() == "v" || symbols[i].ToString() == "y" || symbols[i].ToString() == " " || symbols[i].ToString() == ".")
                {
                    roublesSumm += 1;
                }
                else if (symbols[i].ToString() == "b" || symbols[i].ToString() == "e" || symbols[i].ToString() == "h" || symbols[i].ToString() == "k" || symbols[i].ToString() == "n" || symbols[i].ToString() == "q" || symbols[i].ToString() == "t" || symbols[i].ToString() == "w" || symbols[i].ToString() == "z" || symbols[i].ToString() == ",")
                {
                    roublesSumm += 2;
                }
                else
                {
                    roublesSumm += 3;
                }
                // Console.WriteLine(symbols[i]);
            }
            Console.WriteLine("За спам должны заплатить - " + roublesSumm + " рубля");
        }
    }

Работа в команде - запись чисел под диктовку.

 class TeamWork
    {
        static void Main()
        {
            int[] numbers = { 2, 2, 2, 1, 4, 5, 5, 5, 5, 5, 5, 6, 7, 1, 1, 4, 4, 3, 3, 3, 9 };
            int counter = 1;
            List<int> endNumbers = new List<int>(); 
            for (int i = 1; i < numbers.Length; i++)
            {
                if (numbers[i-1] == numbers[i])
                {
                    counter += 1;
                    continue;
                }
                else
                {
                    endNumbers.Add(counter);
                    endNumbers.Add(numbers[i-1]);
                    counter = 1;
                }
            }
            counter = 1;
            for (int k = numbers.Length-1; k > 0; k--)
            {
                if (numbers[k] == numbers[k-1])
                {
                    counter += 1;
                    continue;
                }
                else
                {
                    endNumbers.Add(counter);
                    endNumbers.Add(numbers[k]);
                    break;
                }

            }
            foreach (int m in endNumbers)
            {
                Console.Write(m + ", ");
            }
        }
    }


1263. Выборы - сколько процентов голосов за каждого кандидата

class Elections
    {
        static void Main()
        {
            Console.WriteLine("Введите число кандидатов (не более 10000):");
            int numbersOfCandidates = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите число избирателей (не более 10000):");
            int numbersOfVoters = Int32.Parse(Console.ReadLine());
            Random rnd = new Random();
            List <int> votes = new List<int>();
            for (int i = 0; i < numbersOfVoters; i++)
            {
                votes.Add(rnd.Next(1, numbersOfCandidates+1));
            }
            foreach (int m in votes)
            {
                Console.Write(m + ", ");
            }
            List<int> voiceCounter = new List<int>();
            Console.WriteLine();
            for (int k = 1; k <= numbersOfCandidates; k++)
            {
                voiceCounter.Add(votes.Count(n => n.Equals(k)));
                // Console.Write(voiceCounter[k-1] + ", ");
            }
            Console.WriteLine();
            for (int l = 0; l < numbersOfCandidates; l++)
            {
                double percentageVoiceCount = (Convert.ToDouble(voiceCounter[l]) / Convert.ToDouble(numbersOfVoters)) * 100;
                Console.WriteLine("За кандидата {0} проголосовали {1}% избирателей", l+1, Math.Round(percentageVoiceCount, 2));
            }       
        }
    }

1991. Битва у болота - выжившие дроиды и оставшиеся бумбумы

class SwampBattle
    {
        static void Main()
        {
            Console.WriteLine("Введите количество блоков дроидов и количество частей армии гунганов: ");
            int partsOfArmies = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество дроидов в каждом блоке: ");
            int numberOfDroids = Int32.Parse(Console.ReadLine());
            Random rnd = new Random();
            int[] bumbum = new int[partsOfArmies];
            int leftoverBumBum = 0;
            int survivorDroids = 0;
            for (int i = 0; i < bumbum.Length; i++)
            {
                bumbum[i] = rnd.Next(0, numberOfDroids + numberOfDroids);
                Console.Write(bumbum[i] + ", ");
                if (bumbum[i] >= numberOfDroids)
                {
                    leftoverBumBum = (bumbum[i] - numberOfDroids) + leftoverBumBum;
                }
                if (bumbum[i] < numberOfDroids)
                {
                    survivorDroids = (numberOfDroids - bumbum[i]) + survivorDroids;
                }
            }
            Console.WriteLine();
            Console.WriteLine("Оставшиеся БумБумы - " + leftoverBumBum + " штук");
            Console.WriteLine("Выжившие Дроиды - " + survivorDroids + " единиц");
        }
    }

1100. Таблица результатов. Сортировка по результатам комманды

 class TableOfResults
    {
        static void Main()
        {
            Console.WriteLine("Введите количество комманд: ");
            int commandNumber = Int32.Parse(Console.ReadLine());
            Random rnd = new Random();
            List<int[]> commandsData = new List<int[]>();
            {
                for (int i = 0; i < commandNumber; i++)
                {
                    commandsData.Add(new int[] { i + 1, rnd.Next(0, commandNumber + commandNumber) });
                }

            };
            var sortedList = commandsData.OrderBy(x => x[1]).ToList();
            foreach (int[] item in sortedList)
            { 
                Console.WriteLine("Номер комманды: " + item[0] + ", количество задач: " + item[1]);
            }
            Console.WriteLine();
        }
    }

1327. Предохранители. Сколько предохранителей нужно запасти

class Fuses
    {
        static void Main()
        {
            Console.WriteLine("Введите первый по счету день в интервале: ");
            int firstDay = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите последний по счету день в интервале: ");
            int lastDay = Int32.Parse(Console.ReadLine());
            int counterOfFuse = 0;
            for (int i = firstDay; i <= lastDay; i++)
            {
                if (i % 2 == 0)
                {
                    continue;
                }
                else
                {
                    counterOfFuse += 1; 
                }
            }
            Console.WriteLine("Необходимо запастись {0} предохранителями", counterOfFuse);
        }
    }

1876. Утро сороконожки - левые и правые тапочки

 class Centipede
    {
        static void Main()
        {
            Console.WriteLine("Введите количество правых тапок: (от 40 до 100): ");
            int rightSneakers = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество левых тапок: (от 40 до 100): ");
            int leftSneakers = Int32.Parse(Console.ReadLine());
            int shoeingTime = rightSneakers * 2 + leftSneakers;
            Console.WriteLine("Сороконожке в самом худшем случае потребуется {0} минут", shoeingTime);
        }
    }

Просто алгоритм размена монет

int[] terms = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
            List<int> requiredTerms = new List<int>();
            int termCounter = 0;
            while (summSecondTriple >= 1)
            {
                int currterm = terms [termCounter];
                if (currterm <= summSecondTriple)
                {
                    requiredTerms.Add(currterm);
                    summSecondTriple -= currterm;
                }
                else
                {
                    termCounter++;
                }
            }
            foreach(int n in requiredTerms)
            {
                Console.WriteLine(n);
            }

1493. В одном шаге от счастья - Счастливый билет (возможно, есть ошибка).

 class Happynes
    {
        static void Main()
        {
            int[] firtsTriple = new int[3];
            int[] secondTriple = new int[3];
            int summfirtsTriple = 0;
            int summSecondTriple = 0;
            Random rnd = new Random();
            for (int i = 0; i < 3; i++)
            {
                firtsTriple[i] = rnd.Next(0, 10);
                summfirtsTriple += firtsTriple[i];
                Console.Write(firtsTriple[i] + ", ");
            }
            if (summfirtsTriple % 2 == 0)
            {
                summSecondTriple = summfirtsTriple + 1;
            }
            else
            {
                summSecondTriple = summfirtsTriple - 1;
            }
            Console.WriteLine();
            Console.WriteLine(summfirtsTriple + " " + summSecondTriple);
            if (summSecondTriple < 10)
            {
                int firstDigit = rnd.Next(0, 6);
                int secondDigit = rnd.Next(0, 6);
                int thirdDigit = summSecondTriple - firstDigit - secondDigit;
                Console.WriteLine(firstDigit + " " + secondDigit + " " + thirdDigit);
                secondTriple = new int[] { firstDigit, secondDigit, thirdDigit };
            }
            if (summSecondTriple >= 10 && summSecondTriple <=20)
            {
                int firstDigit = rnd.Next(3, 6);
                int secondDigit = rnd.Next(3, 6);
                int thirdDigit = summSecondTriple - firstDigit - secondDigit;
                Console.WriteLine(firstDigit + " " + secondDigit + " " + thirdDigit);
                secondTriple = new int[] { firstDigit, secondDigit, thirdDigit };
            }
            if (summSecondTriple > 20)
            {
                int firstDigit = rnd.Next(9, 10);
                int secondDigit = rnd.Next(9, 10);
                int thirdDigit = summSecondTriple - firstDigit - secondDigit;
                Console.WriteLine(firstDigit + " " + secondDigit + " " + thirdDigit);
                secondTriple = new int[] { firstDigit, secondDigit, thirdDigit };
            }
            summSecondTriple = 0;
            for (int l = 0; l < 3; l++)
            {
                summSecondTriple += secondTriple[l];
            }
            if (summfirtsTriple == summSecondTriple - 1 || summfirtsTriple == summSecondTriple + 1)
            {
                Console.WriteLine("Счастливый билет :)");
            }
            else
            {
                Console.WriteLine("Не счастливый билет :(");
            }
        }
    }

1243. Развод семи гномов - приданное белоснежки.

class Dwarfs
    {
        static void Main()
        {
            Console.WriteLine("Введите количество вещей, которые необходимо разделить между гномами: ");
            long propertyCounter = Int64.Parse(Console.ReadLine());
            long dowry = propertyCounter % 7;
            Console.WriteLine("Белоснежка получит {0} вещей", dowry);
        }
    }

1110. Степень - числа, остаток от деления.

class Power
    {
        static void Main()
        {
            Console.WriteLine("Введите степень числа Х (от 0 до 999): ");
            double power = double.Parse(Console.ReadLine());
            Console.WriteLine("Введите делитель (от 0 до 999): ");
            int  denominator = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите остаток от деления (от 0 до 999): ");
            int remainderOfDivision = Int32.Parse(Console.ReadLine());
            List<double> results = new List<double>();
            for (int i = 0; i < denominator -1; i++)
            {
                double result = Math.Pow(i, power) % denominator;
                if (result == remainderOfDivision)
                {
                    results.Add(i);
                }
                else
                {
                    continue;
                }
            }
            results.Sort();
                if (results.Any())
                {
                foreach (int m in results)
                    { 
                        Console.Write(m + " ");
                    }
                }
                else
                {
                Console.WriteLine(-1);
                }
        }
    }

1349. Ферма - теорема Ферма

class Ferma
    {
        static void Main()
        {
            Console.WriteLine("Введите степень для чисел (от 0 до 100)");
            double power = double.Parse(Console.ReadLine());
            if (power > 2 || power == 0)
            {
                Console.WriteLine(-1);
            }
            if (power == 1)
            {
                Console.WriteLine("1 " + "2 " + "3");
            }
            if (power == 2)
            {
                // Вот тут решение теоремы Пифагора http://studassistent.ru/charp/zadacha-teorema-pifagora-c
            }
        }
    }

1881. Длинное условие задачи. Посчитать количество страниц в описании.

 class TaskCondition
    {
        static void Main()
        {
            Console.WriteLine("Введите количество строк на странице: ");
            int strings = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество символов в строке: ");
            int symbols = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество слов в тексте: ");
            int words = Int32.Parse(Console.ReadLine());
            Random rnd = new Random();
            string[] wordArray = { "Alice", "Ariel", "Aurora", "Phil", "Peter", "Olaf", "Phoebus", "Ralph", "Robin", "Bambi", "Belle", "Bolt", "Mulan", "Mowgli", "Mickey", "Silver", "Simba", "Stitch", "Dumbo", "Genie", "Jiminy", "Kuzko", "Kida", "Kenai", "Tarzan", "Tiana", "Winnie" };
            List<string> wordList = new List<string>();
            for (int i = 0; i < words; i++)
            {
                int mIndex = rnd.Next(0, wordArray.Length);
                wordList.Add(wordArray[mIndex]);
            }
            int stringCounter = 0;
            int stringLenght = 0;
            for (int j = 0; j < words; j++)
            {
                stringLenght = stringLenght + 1 + wordList[j].Length; 
                if (stringLenght >= symbols)
                {
                    stringCounter += 1;
                    j = j - 1;
                    stringLenght = 0;
                }
            }
            Console.WriteLine("Количество строк в описании - " + stringCounter);
            int pageCounter = 0;
            if (stringCounter % strings > 0)
            { 
                pageCounter = (stringCounter / strings) + 1;
            }
            else
            {
                pageCounter = stringCounter / strings;
            }
            Console.WriteLine("Количество страниц в описании - " + pageCounter);
        }
    }

1893. A380 - выбор места в самолете

class A380
    {
        static void Main()
        {
            string seatHigh = "";
            string seatBussiness = "";
            string seatEconom = "";
            string seat = "";
            Console.WriteLine("Введите номер ряда (От 1 до 65)");
            int row = Int32.Parse(Console.ReadLine());
            if (row <= 2)
            {
                Console.WriteLine("Введите место (от A до D");
                seatHigh = Console.ReadLine();
                seat = seatHigh;
            }
            if (row > 2 && row < 21)
            {
                Console.WriteLine("Введите место (от A до F)");
                seatBussiness = Console.ReadLine();
                seat = seatBussiness;
            }
            if (row > 21 && row < 66)
            {
                Console.WriteLine("Введите место (от A до K, исключая I)");
                seatEconom = Console.ReadLine();
                seat = seatEconom;
            }
            Console.WriteLine("Вы выбрали место: " + row + seat);
            if (row <=2 && (seat == "A" || seat == "D"))
            {
                Console.WriteLine("Вы выбрали место у окна и прохода");
            }
            else if ((row <= 2) && (seat == "B" || seat == "C") || (row > 2 && row < 21) && (seat == "B" || seat == "C" || seat == "D" || seat == "E") || (row > 21 && row < 66) && (seat == "G" || seat == "C" || seat == "D" || seat == "H"))
            {
                Console.WriteLine("Вы выбрали место у прохода");
            }
            else if ((row > 2 && row < 21) && (seat == "A" || seat == "F") || (row > 21 && row < 66) && (seat == "A" || seat == "K"))
            {
                Console.WriteLine("Вы выбрали место у окна");
            }
            else
            {
                Console.WriteLine("Ваше место ни у окна ни у прохода, либо такого места не существует");
            }
        }
    }

1607. Такси - Петя торгуется с таксистом до твердой цены

class Taxi
    {
        static void Main()
        {
            Console.WriteLine("Введите стартовую цену Пети:");
            int startPricePit = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите стартовую цену таксиста:");
            int startPriceTaxidriver = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите надбавку Пети:");
            int surchargePit = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите скидку таксиста:");
            int discountTaxidriver = Int32.Parse(Console.ReadLine());
            int pricePit = startPricePit;
            int priceTaxidriver = startPriceTaxidriver;
            int endPrice = 0;
            if (pricePit >= priceTaxidriver)
            {
                Console.WriteLine("Петя оказался дураком и едет за " + pricePit + " рублей");
            }
            else
            { 
            for (int i = 0; i < 10000; i++)
            {
                pricePit = pricePit + surchargePit;
                priceTaxidriver = priceTaxidriver - discountTaxidriver;
                    if (priceTaxidriver > pricePit)
                    {
                        continue;
                    }
                    else
                    {
                        if (priceTaxidriver >= pricePit)
                        {
                            endPrice = priceTaxidriver;
                            break;
                        }
                        else
                        {
                            endPrice = pricePit;
                            break;
                        }
                    }
            }
                Console.WriteLine("Сговорились за {0} рублей", endPrice);
            }
        }
    }

1496. Спамер - определить команды спамеры

 class Spamer
    {
        static void Main()
        {
            Console.WriteLine("Введщите количество сабмитов за последние 10 минут (от 0 до 100):");
            int submits = Int32.Parse(Console.ReadLine());
            Random rnd = new Random();
            string[] commands = { "Alice", "Ariel", "Aurora", "Phil", "Peter", "Olaf", "Phoebus", "Ralph", "Robin", "Bambi", "Belle", "Bolt", "Mulan", "Mowgli", "Mickey", "Silver", "Simba", "Stitch", "Dumbo", "Genie", "Jiminy", "Kuzko", "Kida", "Kenai", "Tarzan", "Tiana", "Winnie" };
            List<string> submitCommands = new List<string>();
            for (int i = 0; i < submits; i++)
            {
                int mIndex = rnd.Next(0, commands.Length);
                submitCommands.Add(commands[mIndex]);
                Console.WriteLine(commands[mIndex]);
            }
            Console.WriteLine();
            List<string> spamerCommands = submitCommands.GroupBy(x => x).Where(g => g.Count() > 1).Select(g => g.Key).ToList();
            foreach (string m in spamerCommands)
            {
                Console.Write(m + ", ");
            }
        }
    }

1196. Экзамен по истории - сравнение дат в списках студента и преподавателя

 class HistoryExam
    {
        static void Main()
        {
            Console.WriteLine("Введите количество дат в списке преподавателя: ");
            int tutorDatesCounter = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите количество дат в списке студента: ");
            int studentDatesCounter = Int32.Parse(Console.ReadLine());
            List<int> tutorDates = new List<int>();
            List<int> studentDates = new List<int>();
            Random rnd = new Random();
            int coincidenceDates = 0;
            for (int i = 0; i < tutorDatesCounter; i++)
            {
                tutorDates.Add(rnd.Next(0, 2018));
            }
            for (int j = 0; j < studentDatesCounter; j++)
            {
                studentDates.Add(rnd.Next(0, 2018));
                Console.Write(studentDates[j] + ", ");
            }
            Console.WriteLine();
            tutorDates.Sort();
            foreach (int m in tutorDates)
            {
                Console.Write(m + ", ");
            }
            Console.WriteLine();
            for (int k = 0; k < studentDatesCounter; k++)
            {
                for (int l = 0; l < tutorDatesCounter; l++)
                {
                    if (studentDates[k] == tutorDates[l])
                    {
                        coincidenceDates += 1;
                    }
                }
            }
            Console.WriteLine("Найдено {0} совпадений", coincidenceDates);
        }
    }

1636. Штрафное время - рассчитать, почему проиграла команда ZZZ

class FineTime
    {
        static void Main()
        {
            Console.WriteLine("Введите штрафное время в минутах команды QXX: ");
            int fineTimeQXX = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите штрафное время в минутах команды ZZZ: (больше, штрафного времени QXX ");
            int fineTimeZZZ = Int32.Parse(Console.ReadLine());
            int[] fineScoreZZZ = new int[10];
            Random rnd = new Random();
            for (int i = 0; i < 10; i++)
            {
                fineScoreZZZ[i] = rnd.Next(0, 5);
                Console.Write(fineScoreZZZ[i] + ", ");
            }
            Console.WriteLine();
            int summfineScoreZZZ = fineScoreZZZ.Sum();
            Console.WriteLine("Сумма штрафных баллов команды ZZZ - " + summfineScoreZZZ);
            int summfineTimeZZZ = summfineScoreZZZ * 20;
            int summfineTimeZZZWithoutMistakes = fineTimeZZZ - summfineTimeZZZ;
            if (summfineTimeZZZWithoutMistakes > fineTimeQXX)
            {
                Console.WriteLine("No chance.");
            }
            else
            {
                Console.WriteLine("Dirty debug :(");
            }
        }
    }

1837. Число Исенбаева (не решена, так как я не понимаю теорию графов).

 class IsenbaevNumber
    {
        static void Main()
        {
            Console.WriteLine("Введите количество команд (от 1 до 100):");
            int commandNumbers = Int32.Parse(Console.ReadLine());
            string[] members = { "Isenbaev", "Alice", "Ariel", "Aurora", "Phil", "Peter", "Olaf", "Phoebus", "Ralph", "Robin", "Bambi", "Belle", "Bolt", "Mulan", "Mowgli", "Mickey", "Silver", "Simba", "Stitch", "Dumbo", "Genie", "Jiminy", "Kuzko", "Kida", "Kenai", "Tarzan", "Tiana", "Winnie" };
            Random rnd = new Random();
            List<string[]> commands = new List<string[]>();
            for (int i = 0; i < commandNumbers; i++)
            {
                int mIndex1 = rnd.Next(0, members.Length);
                int mIndex2 = rnd.Next(0, members.Length);
                int mIndex3 = rnd.Next(0, members.Length);
                string[] command = { members[mIndex1], members[mIndex2], members[mIndex3] };
                Array.Sort(command);
                for (int j = 0; j < 3; j++)
                {
                    Console.Write(command[j] + ", ");
                }
                Console.WriteLine();
                commands.Add(command);
            }
        }
    }

Просто задача по поиску наименьшего общего знаменателя.

 class CommonDenominator
    {
        static void Main()
        {
            Console.WriteLine("Введите количество общих знаменателей:");
            int counterCommonDenominators = Int32.Parse(Console.ReadLine());
            long biggestCommonDenominator = 1;
            int commonDenominator = 0;
            List<int> commonDenominators = new List<int>();
            Console.WriteLine("Введите общие знаменатели, нажимая ввод:");
            for (int i = 0; i < counterCommonDenominators; i++)
            {
                commonDenominators.Add(Int32.Parse(Console.ReadLine()));
                biggestCommonDenominator *= commonDenominators[i]; 
            }
            commonDenominators.Sort();
            Console.WriteLine(biggestCommonDenominator);
            Console.WriteLine(commonDenominators.First());
            for (int j = commonDenominators.First(); j <= biggestCommonDenominator; j++)
            {
                int counter = 0;
                for (int k = 0; k < counterCommonDenominators; k++)
                {
                    if (j % commonDenominators[k] != 0)
                    {
                        counter += 1;
                    }
                    else
                    {
                        continue;
                    }
                }
                //Console.WriteLine(counter);
                if (counter != 0)
                {
                    continue;
                }    
                else
                {             
                    commonDenominator = j;
                    break;
                }
            }
            Console.WriteLine(commonDenominator);
        }
    }

1925. О заслуге британских учёных

class BritishScientists
    {
        static void Main()
        {
            Console.WriteLine("Введите сколько лет назад иноланетяне сбросили на Землю неведомое устройство: ");
            int ageOfNEX = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Введите, какое сегодня число неведомое устройство вывело на экран: ");
            int kNumber = Int32.Parse(Console.ReadLine());
            List<int[]> pairsOfNumbers = new List<int[]>();
            Random rnd = new Random();
            int summOfNEXNumbers = 0;
            int summOfHumanNumbers = 0;
            for (int i = 0; i < ageOfNEX; i++)
            {
                pairsOfNumbers.Add(new int[] { rnd.Next(0, 10), rnd.Next(0, 10) });          
            }
            foreach (int[] item in pairsOfNumbers)
            {
                Console.WriteLine(item[0] + " " + item[1]);
            }
            for (int k = 0; k < ageOfNEX; k++)
            {
                summOfNEXNumbers += pairsOfNumbers[k][0];
                summOfHumanNumbers += pairsOfNumbers[k][1];
            }
            summOfNEXNumbers = summOfNEXNumbers - (ageOfNEX + 1) * 2 + kNumber;
            int savingNumber = summOfNEXNumbers - summOfHumanNumbers;
            if (savingNumber > 0)
            { 
                Console.WriteLine("Нужно ввести спасительное число - " + savingNumber);
            }
            else
            {
                Console.WriteLine("Big Bang!");
            }
        }

1654. Шифровка - убрать двойные символы из строки

class Encryption
    {
        static void Main()
        {
            Random rnd = new Random();
            int lengthOfString = rnd.Next(100, 200);
            var chars = "abcdefghijklmnopqrstuvwxyz";
            string stroka = "";                    
            for (int i = 0; i < lengthOfString; i++)
            {
                stroka += chars[rnd.Next(chars.Length)];
            }
            Console.WriteLine(stroka);
            Console.WriteLine();
            Regex myCoincidence = new Regex("(\\w)\\1");
            string resultStroka = myCoincidence.Replace(stroka,"");
            Console.WriteLine(resultStroka);
        }
    }

1617. Ползуны - подсчет количества вагонов.

class Sliders
    {
        static void Main()
        {
            Console.WriteLine("Введите количество имеющихся колесных пар: ");
            int pairOfWheelsCounter = Int32.Parse(Console.ReadLine());
            Random rnd = new Random();
            List<int> pairOfWheelsDiameters = new List<int>();
            for (int i = 0; i < pairOfWheelsCounter; i++)
            {
                pairOfWheelsDiameters.Add(rnd.Next(695, 701));
                Console.WriteLine(pairOfWheelsDiameters[i]);
            }
            List<int> wagonCounterList = new List<int>();
            foreach (int val in pairOfWheelsDiameters.Distinct())
            {
                int wagoncounter = 0;
                int count = pairOfWheelsDiameters.Count(x => x == val);
                wagoncounter = count / 4;
                wagonCounterList.Add(wagoncounter);
                Console.WriteLine("Колеса с диаметром {0} - {1} вагонов", val, wagoncounter);
            }
            int allWagons = wagonCounterList.Sum();
            Console.WriteLine("Всего {0} вагонов", allWagons);
        }
    }

1131. Копирование - вычисление минимального времени разливания по нуль-модему.

class Copying
    {
        static void Main()
        {
            Random rnd = new Random();
            int personalComputers = 5;
            int nullModemCables = 10;
            int hours = 0;
            int donePersonalComputers = 2;
            for (int i = 2; i < personalComputers; i++)
            {
                if (donePersonalComputers <= nullModemCables)
                {
                    hours += 1;
                    donePersonalComputers = 2 * (i - 1);
                }
                else
                {
                    if (donePersonalComputers < personalComputers)
                    {
                        donePersonalComputers += nullModemCables;
                        hours += 1; 
                    }
                    else
                    {
                        break;
                    }
                }
            }
            Console.WriteLine(personalComputers);
            Console.WriteLine(nullModemCables);
            Console.WriteLine(hours);
        }
    }

2002. Тестовое задание - неправильно!!!

 class TestTask
    {
        static void Main()
        {
            Random rnd = new Random();
            string[] usernames = { "Alice", "Ariel" };
            string[] passwords = { "Sir", "Walter" };
            string[] state = { "register" };
            int eventCounter = rnd.Next(5, 11);
            List<string[]> usernamePassword = new List<string[]> ();
            usernamePassword.Add(new string[] { "", "", "" });
            for (int i = 0; i < eventCounter; i++)
            {
                int mIndex1 = rnd.Next(0, state.Length);
                int mIndex2 = rnd.Next(0, usernames.Length);
                int mIndex3 = rnd.Next(0, passwords.Length);
                string events = state[mIndex1];
                if (events == "register")
                {
                    for (int j = 0; j < usernamePassword.Count; j++)
                    {
                        if (usernamePassword[j][0] == usernames[mIndex2])
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " " + passwords[mIndex3] + " ");
                            Console.WriteLine("fail: user already exists");  
                        }
                        else
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " " + passwords[mIndex3] + " ");
                            usernamePassword.Add(new string[] { usernames[mIndex2], passwords[mIndex3], "not logged" });
                            Console.WriteLine("success: new user added");
                        }
                    } 
                }
                else if (events == "login")
                {
                    foreach (string[] item in usernamePassword)
                    {
                        if (usernames[mIndex2] == item[0] && passwords[mIndex3] == item[1] && item[2] == "logged")
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " " + passwords[mIndex3] + " ");
                            Console.WriteLine("fail: already logged in");
                           
                        }
                        else if (usernames[mIndex2] == item[0] && passwords[mIndex3] == item[1] && item[2] == "not logged")
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " " + passwords[mIndex3] + " ");
                            Console.WriteLine("success: user logged in");
                            item[2] = "logged";
                            
                        }
                        else if (usernames[mIndex2] == item[0] && passwords[mIndex3] != item[1])
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " " + passwords[mIndex3] + " ");
                            Console.WriteLine("fail: incorrect password");
                            
                        }
                        else
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " " + passwords[mIndex3] + " ");
                            Console.WriteLine("fail: no such user");
                            
                        }
                    }
                }
                else if (events == "logout")
                {
                    foreach (string[] item in usernamePassword)
                    {
                        if (usernames[mIndex2] == item[0] && item[2] ==  "not logged")
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " ");
                            Console.WriteLine("fail: already logged out");
                            
                        }
                        else if (usernames[mIndex2] == item[0] && item[2] == "logged")
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " ");
                            Console.WriteLine("success: user logged out");
                            item[2] = "not logged";
                            
                        }
                        else
                        {
                            Console.Write(events + " " + usernames[mIndex2] + " ");
                            Console.WriteLine("fail: no such user");
                            
                        }
                    }
                }
            }
        }
    }

2035. Очередной пробный тур - подбор тестов

class TestRound
    {
        static void Main()
        {
            Random rnd = new Random();
            int X = rnd.Next(0, 11);
            int Y = rnd.Next(0, 11);
            int summ = rnd.Next(0, 21);
            Console.WriteLine("Числа Х и У - " + X + " " + Y);
            Console.WriteLine("Сумма - " + summ);
            int a = 0;
            int b = 0;
            if (X+Y < summ)
            {
                Console.WriteLine("impossible");
            }
            else if (X+Y==summ)
            {
                Console.WriteLine("Числа a и b - " + X + " " + Y);
            }
            else
            {
                a = X;
                b = Y;
                for (int i = 0; i < 100; i++)
                {
                    a = a - 1;
                    b = b - 1;
                    if (summ == 0)
                    {
                        a = 0;
                        b = 0;
                        Console.WriteLine("Числа a и b - " + a + " " + b);
                        break;
                    }
                    else if (a + b > summ)
                    {
                        continue;
                    }
                    else if (a + b < summ)
                    {
                        a = a + 1;
                        if (a < 0)
                        {
                            b = b + a;
                            a = 0;
                        }
                        else if (b < 0)
                        {
                            a = a + b;
                            b = 0;
                        }
                        Console.WriteLine("Числа a и b - " + a + " " + b);
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Числа a и b - " + a + " " + b);
                        break;
                    }
                }  
            }
        }
    }

